<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://judahsan.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://judahsan.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-09-17T00:40:04+00:00</updated><id>https://judahsan.github.io/feed.xml</id><title type="html">blank</title><subtitle>Software engineer, game developer, and all around tech geek. </subtitle><entry><title type="html">Creating A Build Tool Using Go</title><link href="https://judahsan.github.io/blog/2024/creating-a-build-tool-using-go/" rel="alternate" type="text/html" title="Creating A Build Tool Using Go"/><published>2024-07-28T10:00:00+00:00</published><updated>2024-07-28T10:00:00+00:00</updated><id>https://judahsan.github.io/blog/2024/creating-a-build-tool-using-go</id><content type="html" xml:base="https://judahsan.github.io/blog/2024/creating-a-build-tool-using-go/"><![CDATA[<p>Part of <a href="https://www.linkedin.com/in/katungi/">Daniel Katungi’s</a> talk during Daytona Developers Club Tour ‘24, Nairobi on Thurdsay July 18th</p> <h4 id="understanding-a-fully-fledged-web-build-toolvite">Understanding a fully-fledged web build tool(Vite)</h4> <p>Vite is a frontend build tool that has revolutionized the development experience by leveraging native ESM capabilities of modern browsers. To fully grasp its power. Core concepts:</p> <ol> <li>Native ESM <ul> <li><strong>Leveraging Browser Capabilities</strong>: Vite takes advantage of the native ESM (EcmaScript Modules) support in modern browsers. It can serve you code directly as ESM modules without the need for bundling during development.</li> <li><strong>Improved Development Experience</strong>: This approach significantly speeds up development because the browser handles module loading efficiently.</li> <li><a href="https://vitejs.dev/guide/why">Why Vite</a></li> <li><a href="https://medium.com/@iboroinyang01/bundle-up-vite-or-webpack-c260915e0ff7">Bundle Up? Vite or Webpack?</a></li> </ul> </li> <li>ESBuild <ul> <li><strong>High-Performance Builder</strong>: Vite utilizes ESBuild, a Go-based bundler, for production builds. ESBuild is renowned for its incredible speed and efficiency.</li> <li><strong>Optimized Output</strong>: It produces highly optimized bundles, resulting in faster load times for your application.</li> <li><a href="https://vitejs.dev/guide/">Getting started with Vite</a></li> </ul> </li> <li>Dependency Pre-Bundling <ul> <li><strong>Optimized Import Paths</strong>: Vite pre-bundles large dependency libraries into chunks to reduce the number of requests and improve load performance.</li> <li><strong>Faster Development</strong>: This optimization helps in faster development by avoiding unnecessary re-bundling during development.</li> <li><a href="https://vitejs.dev/guide/dep-pre-bundling">Dependency Pre-Bundling</a></li> </ul> </li> <li>Hot Module Replacement (HMR) <ul> <li><strong>Instant Updates</strong>: Vite implements HMR to enable rapid development by updating only the changed modules in the browser without a full page reload.</li> <li><strong>Improved Developer Experience</strong>: This significantly enhances the development workflow by providing instant feedback on code changes.</li> </ul> </li> <li>Plugin System <ul> <li><strong>Extensibility</strong>: Vite offers a flexible plugin system that allows developers to customize the build process to fit their specific needs.</li> <li><strong>Rich Ecosystem</strong>: There’s a vast ecosystem of Vite plugins available for various tasks like TypeScript support, CSS preprocessors, and more.</li> <li><a href="https://www.dhiwise.com/post/the-ultimate-guide-to-using-vite-plugin-for-lightning-fast-web-development#:~:text=By%20supporting%20Rollup%20plugins%2C%20Vite,enhancing%20its%20flexibility%20and%20extensibility.">The Ultimate Guide to Using Vite Plugin for Lightning-Fast Web Development</a></li> </ul> </li> </ol> <h4 id="how-it-works">How It Works</h4> <ul> <li><strong>Development Server</strong>: Vite starts a development server that serves your code directly as ESM modules. The browser handles module imports efficiently.</li> <li><strong>HMR</strong>: Vite watches for changes in your code and uses WebSockets to send updates to the browser.1 Only the affected modules are reloaded, providing a fast feedback loop. <a href="https://divriots.com/blog/vite-in-the-browser/#:~:text=Hot%20Module%20Reload%20(HMR),to%20the%20client%20(browser).">Vite In The Browser</a> <a href="https://blog.stackblitz.com/posts/what-is-vite-introduction/#:~:text=Each%20time%20you%20change%20any,their%20effects%20on%20the%20application.">Vite Core Features</a></li> <li><strong>Production Build</strong>: When building for production, Vite uses ESBuild to bundle your code into optimized chunks. Dependency pre-bundling is applied to further improve performance.</li> </ul> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/vite-image.webp-480.webp 480w,/assets/img/vite-image.webp-800.webp 800w,/assets/img/vite-image.webp-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/vite-image.webp" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <blockquote> <p>“Vite isn’t just a fast bundler, it’s a development powerhouse. Native ESM support and Hot Module Replacement (HMR) dramatically accelerate your development workflow, while ESBuild and dependency pre-bundling ensure your production builds fly.”</p> </blockquote> <h4 id="creating-a-build-tool-using-go">Creating a Build Tool Using Go</h4> <ol> <li><strong>Set Up Your Go Environment:</strong> <ul> <li>Install Go from the official <a href="https://golang.org/dl/">Go website</a>.</li> <li>Create a new Go project directory.</li> </ul> </li> <li><strong>Install Dependencies:</strong> <ul> <li>Run the following commands to install the <code class="language-plaintext highlighter-rouge">minify</code> package and its sub-packages for JavaScript and CSS minification: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go get <span class="nt">-u</span> github.com/tdewolff/minify
go get <span class="nt">-u</span> github.com/tdewolff/minify/js
go get <span class="nt">-u</span> github.com/tdewolff/minify/css
</code></pre></div> </div> </li> </ul> </li> <li><strong>Read and Parse Files:</strong> <ul> <li>Use the <code class="language-plaintext highlighter-rouge">os</code> and <code class="language-plaintext highlighter-rouge">io/ioutil</code> packages to read files from the filesystem.</li> </ul> </li> <li><strong>Transpile, Bundle, and Minify Code:</strong> <ul> <li>Use the <code class="language-plaintext highlighter-rouge">minify</code> package to minify JavaScript and CSS files.</li> <li>Bundle multiple JavaScript and CSS modules into a single file.</li> </ul> </li> <li><strong>Serve Files:</strong> <ul> <li>Use the <code class="language-plaintext highlighter-rouge">net/http</code> package to serve files during development.</li> <li>Implement a simple server that watches for file changes and reloads the browser.</li> </ul> </li> <li><strong>Command-Line Interface (CLI):</strong> <ul> <li>Create a CLI using the <code class="language-plaintext highlighter-rouge">flag</code> package to provide options for building, serving, and watching files.</li> </ul> </li> </ol> <p>Here is the complete code for the build tool:</p> <div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"flag"</span>
    <span class="s">"fmt"</span>
    <span class="s">"io/ioutil"</span>
    <span class="s">"net/http"</span>
    <span class="s">"os"</span>
    <span class="s">"path/filepath"</span>
    <span class="s">"strings"</span>

    <span class="s">"github.com/tdewolff/minify"</span>
    <span class="s">"github.com/tdewolff/minify/css"</span>
    <span class="s">"github.com/tdewolff/minify/js"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c">// Define CLI flags</span>
    <span class="n">build</span> <span class="o">:=</span> <span class="n">flag</span><span class="o">.</span><span class="n">Bool</span><span class="p">(</span><span class="s">"build"</span><span class="p">,</span> <span class="no">false</span><span class="p">,</span> <span class="s">"Build the project"</span><span class="p">)</span>
    <span class="n">serve</span> <span class="o">:=</span> <span class="n">flag</span><span class="o">.</span><span class="n">Bool</span><span class="p">(</span><span class="s">"serve"</span><span class="p">,</span> <span class="no">false</span><span class="p">,</span> <span class="s">"Serve the project"</span><span class="p">)</span>
    <span class="n">flag</span><span class="o">.</span><span class="n">Parse</span><span class="p">()</span>

    <span class="k">if</span> <span class="o">*</span><span class="n">build</span> <span class="p">{</span>
        <span class="n">buildProject</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="o">*</span><span class="n">serve</span> <span class="p">{</span>
        <span class="n">serveProject</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">buildProject</span><span class="p">()</span> <span class="p">{</span>
    <span class="c">// Initialize minifier</span>
    <span class="n">m</span> <span class="o">:=</span> <span class="n">minify</span><span class="o">.</span><span class="n">New</span><span class="p">()</span>
    <span class="n">m</span><span class="o">.</span><span class="n">AddFunc</span><span class="p">(</span><span class="s">"text/javascript"</span><span class="p">,</span> <span class="n">js</span><span class="o">.</span><span class="n">Minify</span><span class="p">)</span>
    <span class="n">m</span><span class="o">.</span><span class="n">AddFunc</span><span class="p">(</span><span class="s">"text/css"</span><span class="p">,</span> <span class="n">css</span><span class="o">.</span><span class="n">Minify</span><span class="p">)</span>

    <span class="c">// Read and concatenate JavaScript and CSS files</span>
    <span class="n">files</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">ioutil</span><span class="o">.</span><span class="n">ReadDir</span><span class="p">(</span><span class="s">"./src"</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Error reading source directory:"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="n">bundledCode</span> <span class="n">strings</span><span class="o">.</span><span class="n">Builder</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">file</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">files</span> <span class="p">{</span>
        <span class="n">content</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">ioutil</span><span class="o">.</span><span class="n">ReadFile</span><span class="p">(</span><span class="s">"./src/"</span> <span class="o">+</span> <span class="n">file</span><span class="o">.</span><span class="n">Name</span><span class="p">())</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Error reading file:"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="p">}</span>

        <span class="k">var</span> <span class="n">minifiedContent</span> <span class="kt">string</span>
        <span class="k">if</span> <span class="n">strings</span><span class="o">.</span><span class="n">HasSuffix</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="n">Name</span><span class="p">(),</span> <span class="s">".js"</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">minifiedContent</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="s">"text/javascript"</span><span class="p">,</span> <span class="kt">string</span><span class="p">(</span><span class="n">content</span><span class="p">))</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">strings</span><span class="o">.</span><span class="n">HasSuffix</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="n">Name</span><span class="p">(),</span> <span class="s">".css"</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">minifiedContent</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="s">"text/css"</span><span class="p">,</span> <span class="kt">string</span><span class="p">(</span><span class="n">content</span><span class="p">))</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Error minifying file:"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="p">}</span>

        <span class="n">bundledCode</span><span class="o">.</span><span class="n">WriteString</span><span class="p">(</span><span class="n">minifiedContent</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c">// Ensure the dist directory exists</span>
    <span class="n">err</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">MkdirAll</span><span class="p">(</span><span class="s">"./dist"</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">ModePerm</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Error creating dist directory:"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="p">}</span>

    <span class="c">// Write the bundled and minified code to a file</span>
    <span class="n">err</span> <span class="o">=</span> <span class="n">ioutil</span><span class="o">.</span><span class="n">WriteFile</span><span class="p">(</span><span class="s">"./dist/bundle.js"</span><span class="p">,</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">(</span><span class="n">bundledCode</span><span class="o">.</span><span class="n">String</span><span class="p">()),</span> <span class="m">0644</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Error writing bundled file:"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Project built successfully."</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">serveProject</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">http</span><span class="o">.</span><span class="n">Handle</span><span class="p">(</span><span class="s">"/"</span><span class="p">,</span> <span class="n">http</span><span class="o">.</span><span class="n">FileServer</span><span class="p">(</span><span class="n">http</span><span class="o">.</span><span class="n">Dir</span><span class="p">(</span><span class="s">"./dist"</span><span class="p">)))</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Serving project at http://localhost:8080"</span><span class="p">)</span>
    <span class="n">http</span><span class="o">.</span><span class="n">ListenAndServe</span><span class="p">(</span><span class="s">":8080"</span><span class="p">,</span> <span class="no">nil</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <h3 id="steps-to-use-the-build-tool">Steps to Use the Build Tool</h3> <ol> <li><strong>Build the Project:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go run main.go <span class="nt">-build</span>
</code></pre></div> </div> </li> <li><strong>Serve the Project:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go run main.go <span class="nt">-serve</span>
</code></pre></div> </div> </li> </ol>]]></content><author><name></name></author><category term="technology"/><category term="golang"/><category term="vite"/><summary type="html"><![CDATA[Crating a build tool using Go]]></summary></entry><entry><title type="html">Using Tiled with Kaplay</title><link href="https://judahsan.github.io/blog/2024/tiled-kaplay/" rel="alternate" type="text/html" title="Using Tiled with Kaplay"/><published>2024-07-18T23:01:00+00:00</published><updated>2024-07-18T23:01:00+00:00</updated><id>https://judahsan.github.io/blog/2024/tiled-kaplay</id><content type="html" xml:base="https://judahsan.github.io/blog/2024/tiled-kaplay/"><![CDATA[<p>Personal notes from <a href="https://jslegenddev.substack.com/p/how-to-use-tiled-with-kaplayjs">JLegendDev’s blog post</a></p> <h4 id="prerequisites">Prerequisites:</h4> <ul> <li>Basic knowledge of Kaplay.js and JavaScript</li> <li><a href="(https://www.mapeditor.org/)">Tiled</a> downloaded and installed</li> </ul> <h5 id="assets">Assets:</h5> <ul> <li>A 3 tiles wide x 3 tiles tall map. Download assets <a href="https://github.com/JSLegendDev/Zelda-like-Kaplayjs/blob/master/assets/topdownasset.png">here</a>.</li> <li>Bonus: The assets were used in the <a href="https://www.youtube.com/watch?v=pVAmEJqK-3A">Zelda-like tutorial</a></li> </ul> <h3 id="setting-up-tiled">Setting up Tiled</h3> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/setup1-480.webp 480w,/assets/img/setup1-800.webp 800w,/assets/img/setup1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/setup1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Once Tiled is installed, open the program and create a new map like shown in the screenshot above.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/setup2-480.webp 480w,/assets/img/setup2-800.webp 800w,/assets/img/setup2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/setup2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Next, set the map size to 3 x 3 and the tile size to 16 x 16 (Since our spritesheet is designed to be tiles of 16 x 16 pixels). Make sure the “Fixed” option is the one selected. Then, click “OK”.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/setup3-480.webp 480w,/assets/img/setup3-800.webp 800w,/assets/img/setup3-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/setup3.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Now we still need to add our spritesheet so we can start drawing our level. Click on “New Tileset” as shown in the screenshot above.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/setup4-480.webp 480w,/assets/img/setup4-800.webp 800w,/assets/img/setup4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/setup4.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Click on the “Browse” button and select the spritesheet image you want to use in your file explorer. Then, click “OK”.</p> <h3 id="creating-tile-layers">Creating Tile Layers</h3> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/layer-480.webp 480w,/assets/img/layer-800.webp 800w,/assets/img/layer-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/layer.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Rename the default layer named “Tile Layer 1” to “Ground” at the top-right of the editor by double clicking on the current layer name. This will make it editable allowing you to write a new name. Then at the bottom-right where you can see the spritesheet, select the grass tile and start drawing on your grid like shown in the screenshot above. Tip : You can use Ctrl + mouse wheel to zoom in and out.</p> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/layer2-480.webp 480w,/assets/img/layer2-800.webp 800w,/assets/img/layer2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/layer2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>In Tiled, there two major types of layers you can create. The first one is the “Tile Layer” which is used for drawing tiles. The other one is the “Object Layer” and is used to set colliders (hitboxes) or spawn positions for your game entities. <br/> By default, Tiled creates a “Tile Layer” as the first layer, that’s why you were able to draw on the grid previously. Now that you have drawn the ground which is composed of only grass tiles, it’s time to add a bush. <br/> To do this, create a new “Tile Layer” like shown in the screenshot above and name it “Bushes”.</p> <div class="col-sm row mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/layer3-480.webp 480w,/assets/img/layer3-800.webp 800w,/assets/img/layer3-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/layer3.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Make sure this new layer is placed on top of the “Ground” layer. If not the case by default, you can drag a layer around by holding the left mouse button over the tile layer name. <br/> Finally, draw a bush at the center of the grid like shown in the screenshot. Make sure before you do this to have the “Bushes” layer selected in the Layers inspector (located at the top-right). You can select a layer by clicking on its name.</p> <h3 id="creating-object-layers">Creating Object Layers</h3> <div class="col-sm row mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/obj-480.webp 480w,/assets/img/obj-800.webp 800w,/assets/img/obj-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/obj.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Now that we’re done with placing our tiles we need to place our colliders. Colliders are static objects that can serve as obstacles or walls in games. The appropriate layer type for this would be an “Object Layer” because we only care about the position, the height and width of the collider which isn’t possible to set in a “Tile Layer”. <br/> As shown in the screenshot above, create an “Object Layer”.</p> <div class="col-sm row mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/obj2-480.webp 480w,/assets/img/obj2-800.webp 800w,/assets/img/obj2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/obj2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Rename it to “Colliders”. Names are important because they’re used to determine what to do with each layer in our code. <br/> Select the rectangle icon at the top-left of the editor (shown in the screenshot above). Draw a square on the grid by clicking and dragging it around to set its size. <br/> If we had 3 bushes aligned, we would draw one long rectangle as the collider instead of 3 squares as it would be better for performance. In Kaplay.js, the more Game Objects are created the less the game remains performant so it’s important to limit the amount of colliders needed (as much as possible). <br/></p> <div class="col-sm row mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/obj3-480.webp 480w,/assets/img/obj3-800.webp 800w,/assets/img/obj3-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/obj3.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>To make things easy, make sure to enable the “Snap to Grid” option before drawing the rectangle on the grid. This option will make sure the square fits the tile perfectly. It makes things less error prone. You can access this option by going to “View” &gt; “Snapping” &gt; “Snap to Grid”. This is shown in the screenshot above.</p> <div class="col-sm row mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/obj4-480.webp 480w,/assets/img/obj4-800.webp 800w,/assets/img/obj4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/obj4.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Now, create another “Object Layer” and name it “Positions”. This layer will be used to determine where to place our player on the map. Instead of drawing a square like we did for the “Colliders” layer, select the pin icon (at the top-left of the editor) and place a pin at the top-left of the grid. This is where our player will spawn. Using the properties tab on the left, set the name of the pin to be “player”. This is useful to know in your code where to place what. For example, you could have pins named “spider”, “bear”, etc… and for each you would write code to display something different. <br/> Make sure to save your map by going to “File” &gt; “Save As…”. Name the map file as “map.json” and save it to your project’s directory.</p> <div class="col-sm row mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/obj5-480.webp 480w,/assets/img/obj5-800.webp 800w,/assets/img/obj5-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/obj5.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>In Kaplay, drawing tiles individually using k.drawSprite() calls is less efficient than using Tiled to convert our map into a single image and then displaying it within a sprite component. This might sound strange and it is. In other game libraries, it’s more efficient to draw tiles individually rather than baking them into an image. I don’t know how Kaplay implements this, I’m as puzzled as you. <br/> To convert our tilemap to a single image, first, In the Layers inspector, hide the “Positions” and “Colliders” layers by clicking on the eye icons as shown in the screenshot above. <br/> Then, go to “File” and click on “Export As Image”.</p> <div class="col-sm row mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/obj6-480.webp 480w,/assets/img/obj6-800.webp 800w,/assets/img/obj6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/obj6.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>A new menu will appear. Set the place where you want to save the image using the “Browse” button. Once done, make sure to select the option “Only include visible layers” and then click “Export”.</p> <h3 id="rendering-the-map-in-kaplay">Rendering The map in Kaplay</h3> <p>Your “map.json” contains all the data needed to to display your map in Kaplay. Not all of the data is useful, so the most important part is the “layers” property which contains an array of layers. In this project, we only created 3 layers so this array should only have three elements. <br/> As your map grows in size so will this “map.json” file. That’s why I kept the map very small so I could paste the entire “map.json” file here.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w"> </span><span class="nl">"compressionlevel"</span><span class="p">:</span><span class="mi">-1</span><span class="p">,</span><span class="w">
 </span><span class="nl">"height"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="w">
 </span><span class="nl">"infinite"</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="w">
 </span><span class="nl">"layers"</span><span class="p">:[</span><span class="w">
        </span><span class="p">{</span><span class="w">
         </span><span class="nl">"data"</span><span class="p">:[</span><span class="mi">41</span><span class="p">,</span><span class="w"> </span><span class="mi">41</span><span class="p">,</span><span class="w"> </span><span class="mi">41</span><span class="p">,</span><span class="w">
            </span><span class="mi">41</span><span class="p">,</span><span class="w"> </span><span class="mi">41</span><span class="p">,</span><span class="w"> </span><span class="mi">41</span><span class="p">,</span><span class="w">
            </span><span class="mi">41</span><span class="p">,</span><span class="w"> </span><span class="mi">41</span><span class="p">,</span><span class="w"> </span><span class="mi">41</span><span class="p">],</span><span class="w">
         </span><span class="nl">"height"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="w">
         </span><span class="nl">"id"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="w">
         </span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"Ground"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"opacity"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="w">
         </span><span class="nl">"type"</span><span class="p">:</span><span class="s2">"tilelayer"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"visible"</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="w">
         </span><span class="nl">"width"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="w">
         </span><span class="nl">"x"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
         </span><span class="nl">"y"</span><span class="p">:</span><span class="mi">0</span><span class="w">
        </span><span class="p">},</span><span class="w"> 
        </span><span class="p">{</span><span class="w">
         </span><span class="nl">"data"</span><span class="p">:[</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
            </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">161</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w">
            </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">],</span><span class="w">
         </span><span class="nl">"height"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="w">
         </span><span class="nl">"id"</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="w">
         </span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"Bushes"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"opacity"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="w">
         </span><span class="nl">"type"</span><span class="p">:</span><span class="s2">"tilelayer"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"visible"</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="w">
         </span><span class="nl">"width"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="w">
         </span><span class="nl">"x"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
         </span><span class="nl">"y"</span><span class="p">:</span><span class="mi">0</span><span class="w">
        </span><span class="p">},</span><span class="w"> 
        </span><span class="p">{</span><span class="w">
         </span><span class="nl">"draworder"</span><span class="p">:</span><span class="s2">"topdown"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"id"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="w">
         </span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"Colliders"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"objects"</span><span class="p">:[</span><span class="w">
                </span><span class="p">{</span><span class="w">
                 </span><span class="nl">"height"</span><span class="p">:</span><span class="mi">16</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"id"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"name"</span><span class="p">:</span><span class="s2">""</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"rotation"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"type"</span><span class="p">:</span><span class="s2">""</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"visible"</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"width"</span><span class="p">:</span><span class="mi">16</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"x"</span><span class="p">:</span><span class="mi">16</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"y"</span><span class="p">:</span><span class="mi">16</span><span class="w">
                </span><span class="p">}],</span><span class="w">
         </span><span class="nl">"opacity"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="w">
         </span><span class="nl">"type"</span><span class="p">:</span><span class="s2">"objectgroup"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"visible"</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="w">
         </span><span class="nl">"x"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
         </span><span class="nl">"y"</span><span class="p">:</span><span class="mi">0</span><span class="w">
        </span><span class="p">},</span><span class="w">
    
        </span><span class="p">{</span><span class="w">
         </span><span class="nl">"draworder"</span><span class="p">:</span><span class="s2">"topdown"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"id"</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span><span class="w">
         </span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"Positions"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"objects"</span><span class="p">:[</span><span class="w">
                </span><span class="p">{</span><span class="w">
                 </span><span class="nl">"height"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"id"</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"player"</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"point"</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"rotation"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"type"</span><span class="p">:</span><span class="s2">""</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"visible"</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"width"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"x"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"y"</span><span class="p">:</span><span class="mi">0</span><span class="w">
                </span><span class="p">},</span><span class="w"> 
                </span><span class="p">{</span><span class="w">
                 </span><span class="nl">"height"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"id"</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"player"</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"point"</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"rotation"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"type"</span><span class="p">:</span><span class="s2">""</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"visible"</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"width"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"x"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
                 </span><span class="nl">"y"</span><span class="p">:</span><span class="mi">0</span><span class="w">
                </span><span class="p">}],</span><span class="w">
         </span><span class="nl">"opacity"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="w">
         </span><span class="nl">"type"</span><span class="p">:</span><span class="s2">"objectgroup"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"visible"</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="w">
         </span><span class="nl">"x"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
         </span><span class="nl">"y"</span><span class="p">:</span><span class="mi">0</span><span class="w">
        </span><span class="p">}],</span><span class="w">
 </span><span class="nl">"nextlayerid"</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span><span class="w">
 </span><span class="nl">"nextobjectid"</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span><span class="w">
 </span><span class="nl">"orientation"</span><span class="p">:</span><span class="s2">"orthogonal"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"renderorder"</span><span class="p">:</span><span class="s2">"right-down"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"tiledversion"</span><span class="p">:</span><span class="s2">"1.10.2"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"tileheight"</span><span class="p">:</span><span class="mi">16</span><span class="p">,</span><span class="w">
 </span><span class="nl">"tilesets"</span><span class="p">:[</span><span class="w">
        </span><span class="p">{</span><span class="w">
         </span><span class="nl">"columns"</span><span class="p">:</span><span class="mi">39</span><span class="p">,</span><span class="w">
         </span><span class="nl">"firstgid"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="w">
         </span><span class="nl">"image"</span><span class="p">:</span><span class="s2">"topdownasset.png"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"imageheight"</span><span class="p">:</span><span class="mi">496</span><span class="p">,</span><span class="w">
         </span><span class="nl">"imagewidth"</span><span class="p">:</span><span class="mi">624</span><span class="p">,</span><span class="w">
         </span><span class="nl">"margin"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
         </span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"topdownasset"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"spacing"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w">
         </span><span class="nl">"tilecount"</span><span class="p">:</span><span class="mi">1209</span><span class="p">,</span><span class="w">
         </span><span class="nl">"tileheight"</span><span class="p">:</span><span class="mi">16</span><span class="p">,</span><span class="w">
         </span><span class="nl">"tilewidth"</span><span class="p">:</span><span class="mi">16</span><span class="w">
        </span><span class="p">}],</span><span class="w">
 </span><span class="nl">"tilewidth"</span><span class="p">:</span><span class="mi">16</span><span class="p">,</span><span class="w">
 </span><span class="nl">"type"</span><span class="p">:</span><span class="s2">"map"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"version"</span><span class="p">:</span><span class="s2">"1.10"</span><span class="p">,</span><span class="w">
 </span><span class="nl">"width"</span><span class="p">:</span><span class="mi">3</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Assuming you know how to setup Kaplay, here is the code you need to be able to display the map.</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">kaplay</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./lib/kaplay.mjs</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">k</span> <span class="o">=</span> <span class="nf">kaplay</span><span class="p">({</span> <span class="na">global</span><span class="p">:</span> <span class="kc">false</span> <span class="p">});</span>

<span class="nx">k</span><span class="p">.</span><span class="nf">loadSprite</span><span class="p">(</span><span class="dl">"</span><span class="s2">spritesheet</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">./topdownasset.png</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">sliceX</span><span class="p">:</span> <span class="mi">39</span><span class="p">,</span>
  <span class="na">sliceY</span><span class="p">:</span> <span class="mi">31</span><span class="p">,</span>
<span class="p">});</span> <span class="c1">// this is needed for the player animations </span>
<span class="c1">// This because the tiles + player sprites are in the same image </span>
<span class="c1">// If they were separate, we wouldn't need to load the tilesheet as the exported "map.png" would be enough</span>

<span class="nx">k</span><span class="p">.</span><span class="nf">loadSprite</span><span class="p">(</span><span class="dl">"</span><span class="s2">map</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">./map.png</span><span class="dl">"</span><span class="p">);</span>

<span class="k">async</span> <span class="kd">function</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">mapData</span> <span class="o">=</span> <span class="k">await </span><span class="p">(</span><span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">./map.json</span><span class="dl">"</span><span class="p">)).</span><span class="nf">json</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="nx">k</span><span class="p">.</span><span class="nf">add</span><span class="p">([</span><span class="nx">k</span><span class="p">.</span><span class="nf">pos</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)]);</span>
  <span class="nx">k</span><span class="p">.</span><span class="nf">camPos</span><span class="p">(</span><span class="nx">map</span><span class="p">.</span><span class="nx">pos</span><span class="p">);</span>
  <span class="nx">k</span><span class="p">.</span><span class="nf">camScale</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span>

  <span class="nx">map</span><span class="p">.</span><span class="nf">add</span><span class="p">([</span><span class="nx">k</span><span class="p">.</span><span class="nf">sprite</span><span class="p">(</span><span class="dl">"</span><span class="s2">map</span><span class="dl">"</span><span class="p">)]);</span>

  <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">layer</span> <span class="k">of</span> <span class="nx">mapData</span><span class="p">.</span><span class="nx">layers</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">layer</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">tilelayer</span><span class="dl">"</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>

    <span class="k">if </span><span class="p">(</span><span class="nx">layer</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">Colliders</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">object</span> <span class="k">of</span> <span class="nx">layer</span><span class="p">.</span><span class="nx">objects</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">map</span><span class="p">.</span><span class="nf">add</span><span class="p">([</span>
          <span class="nx">k</span><span class="p">.</span><span class="nf">area</span><span class="p">({</span> <span class="na">shape</span><span class="p">:</span> <span class="k">new</span> <span class="nx">k</span><span class="p">.</span><span class="nc">Rect</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nf">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="nx">object</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">object</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span>   <span class="p">}),</span>
          <span class="nx">k</span><span class="p">.</span><span class="nf">body</span><span class="p">({</span> <span class="na">isStatic</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}),</span>
          <span class="nx">k</span><span class="p">.</span><span class="nf">pos</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">object</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span>
        <span class="p">]);</span>
      <span class="p">}</span>
      <span class="k">continue</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if </span><span class="p">(</span><span class="nx">layer</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">Positions</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">object</span> <span class="k">of</span> <span class="nx">layer</span><span class="p">.</span><span class="nx">objects</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">player</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">map</span><span class="p">.</span><span class="nf">add</span><span class="p">([</span>
            <span class="nx">k</span><span class="p">.</span><span class="nf">sprite</span><span class="p">(</span><span class="dl">"</span><span class="s2">spritesheet</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">frame</span><span class="p">:</span> <span class="mi">936</span> <span class="p">}),</span> <span class="c1">// idle frame of the player sprite</span>
            <span class="nx">k</span><span class="p">.</span><span class="nf">area</span><span class="p">(),</span>
            <span class="nx">k</span><span class="p">.</span><span class="nf">pos</span><span class="p">(</span><span class="nx">object</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">object</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span>
          <span class="p">]);</span>
          <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nf">main</span><span class="p">();</span>
</code></pre></div></div> <p>Given the code above and the content of “map.json”, you can figure out what’s going on easily. <br/> However, here a few observations that will help you understand the logic further :</p> <ul> <li> <p>You get the map’s data into your Kaplay game by making a fetch() call to the “map.json” file.</p> </li> <li> <p>We create a map Game Object acting as the parent of all Game Objects placed on the map. This is important because the position coordinates provided by “map.json” are all relative to the map. So if you create a Game Object without the map being the parent, the Game Object’s placement will be off. With our map Game Object we’re able to make sure the positions of tiles and colliders match.</p> </li> <li> <p>Since we’re not drawing the map tile by tile and rather just using the exported image, it’s important to skip any “Tile Layer” in our for loop.</p> </li> </ul> <h3 id="the-results">The Results</h3> <div class="col-sm row mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/result-480.webp 480w,/assets/img/result-800.webp 800w,/assets/img/result-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/result.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <p>Now if I activate the debug mode using the “f1” key, you can see that the collider for the bush is also placed correctly. If you were to write the player movement logic, the player could collide with the bush.</p> <div class="col-sm row mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/result2-480.webp 480w,/assets/img/result2-800.webp 800w,/assets/img/result2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/result2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div>]]></content><author><name></name></author><category term="posts"/><category term="level-design"/><summary type="html"><![CDATA[Using Tiled Web Map Level editor with Kaplay.]]></summary></entry><entry><title type="html">Redis A High-Performance In-Memory Data Store</title><link href="https://judahsan.github.io/blog/2024/redis/" rel="alternate" type="text/html" title="Redis A High-Performance In-Memory Data Store"/><published>2024-07-01T10:00:00+00:00</published><updated>2024-07-01T10:00:00+00:00</updated><id>https://judahsan.github.io/blog/2024/redis</id><content type="html" xml:base="https://judahsan.github.io/blog/2024/redis/"><![CDATA[<p>Redis (Remote Dictionary Server) is an open-source, in-memory data structure store used as a database, cache, and message broker. It supports various data structures such as strings, hashes, lists, sets, and sorted sets.</p> <h4 id="key-features-of-redis">Key Features of Redis</h4> <ul> <li><strong>High Performance</strong>: Redis is renowned for its low latency and high throughput, making it suitable for applications that require real-time data processing.</li> <li><strong>Persistence</strong>: Data can be stored in-memory and periodically saved to disk, ensuring durability.</li> <li><strong>Replication</strong>: Redis supports master-slave replication, allowing data to be replicated across multiple servers for redundancy and high availability.</li> <li><strong>Transactions</strong>: Redis provides atomic operations through commands like MULTI, EXEC, DISCARD, and WATCH.</li> <li><strong>Pub/Sub Messaging</strong>: Enables message broadcasting and subscription, useful for real-time applications such as chat systems and live notifications.</li> <li><strong>Lua Scripting</strong>: Supports executing scripts to perform complex operations atomically.</li> </ul> <p><a href="https://redis.io/documentation">Redis Documentation</a> provides comprehensive details on how to get started and utilize its features.</p> <h4 id="use-cases-for-redis">Use Cases for Redis</h4> <ul> <li><strong>Caching</strong>: Improve application performance by caching frequently accessed data.</li> <li><strong>Session Management</strong>: Store and manage user sessions efficiently.</li> <li><strong>Real-time Analytics</strong>: Process and analyze real-time data streams.</li> <li><strong>Message Queues</strong>: Implement queues for background processing tasks.</li> </ul> <blockquote> <p>“Redis is not only a simple key-value store but also a rich set of powerful data structures that provide a solid foundation for building high-performance applications.”</p> </blockquote> <h4 id="getting-started-with-redis">Getting Started with Redis</h4> <ol> <li><strong>Installation</strong>: Download and install Redis from the <a href="https://redis.io/download">official website</a>.</li> <li><strong>Basic Commands</strong>: Learn the basic commands to set and get values.</li> <li><strong>Advanced Features</strong>: Explore advanced features like transactions and Lua scripting.</li> </ol> <p>For full details about Redis, visit the <a href="https://redis.io/documentation">Redis Documentation</a>.</p> <h4 id="example-commands">Example Commands</h4> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Start Redis server</span>
redis-server

<span class="c"># Connect to Redis</span>
redis-cli

<span class="c"># Set a key-value pair</span>
SET key <span class="s2">"value"</span>

<span class="c"># Get the value of a key</span>
GET key
</code></pre></div></div>]]></content><author><name></name></author><category term="technology"/><category term="redis"/><category term="database"/><category term="in-memory"/><summary type="html"><![CDATA[Understanding Redis and its benefits for modern applications]]></summary></entry><entry><title type="html">Dockerizing and Deploying Your App to Docker Hub</title><link href="https://judahsan.github.io/blog/2024/docker/" rel="alternate" type="text/html" title="Dockerizing and Deploying Your App to Docker Hub"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://judahsan.github.io/blog/2024/docker</id><content type="html" xml:base="https://judahsan.github.io/blog/2024/docker/"><![CDATA[<h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="c1d043a3-6792-461a-af45-3f40d89a4fc9" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="c1d043a3-6792-461a-af45-3f40d89a4fc9" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="f4cc319f-84f1-46c9-8e59-9ee7f9417898" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="f4cc319f-84f1-46c9-8e59-9ee7f9417898" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="1309963a-b85e-4d5a-88d2-585c777ad9b0" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="1309963a-b85e-4d5a-88d2-585c777ad9b0" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[Here's a detailed step-by-step guide on how to create a Docker application, build a Docker image, push it to Docker Hub, and link GitHub with Docker Hub for free.]]></summary></entry></feed>